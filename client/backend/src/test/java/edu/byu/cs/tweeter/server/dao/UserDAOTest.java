package edu.byu.cs.tweeter.server.dao;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;

import edu.byu.cs.tweeter.model.domain.User;
import edu.byu.cs.tweeter.model.service.request.FollowCountRequest;
import edu.byu.cs.tweeter.model.service.request.FollowRequest;
import edu.byu.cs.tweeter.model.service.request.FollowerRequest;
import edu.byu.cs.tweeter.model.service.request.FollowingRequest;
import edu.byu.cs.tweeter.model.service.request.IsFollowingRequest;
import edu.byu.cs.tweeter.model.service.request.RegisterRequest;
import edu.byu.cs.tweeter.model.service.request.UnfollowRequest;
import edu.byu.cs.tweeter.model.service.response.FollowCountResponse;
import edu.byu.cs.tweeter.model.service.response.FollowResponse;
import edu.byu.cs.tweeter.model.service.response.FollowerResponse;
import edu.byu.cs.tweeter.model.service.response.FollowingResponse;
import edu.byu.cs.tweeter.model.service.response.IsFollowingResponse;
import edu.byu.cs.tweeter.model.service.response.RegisterResponse;
import edu.byu.cs.tweeter.model.service.response.UnfollowResponse;
import edu.byu.cs.tweeter.server.TestWithAuthToken;

public class UserDAOTest extends TestWithAuthToken {

    private UserDAO userDAO;

    private static final String MALE_IMAGE_URL = "https://faculty.cs.byu.edu/~jwilkerson/cs340/tweeter/images/donald_duck.png";
    private static final String FEMALE_IMAGE_URL = "https://faculty.cs.byu.edu/~jwilkerson/cs340/tweeter/images/daisy_duck.png";

    private final User user1 = new User("Allen", "Anderson", "@AllenAnderson", MALE_IMAGE_URL);
    private final User user2 = new User("Amy", "Ames", "@AmyAmes", FEMALE_IMAGE_URL);

    List<User> getDummyFollowers() {
        return Arrays.asList(user1, user2);
    }

    @BeforeEach
    public void setup() {
        userDAO = new UserDAO();
    }

    @Test
    public void testLogin_validRequest() {
        User user = userDAO.login("@FirstNameLastName", "password");
        Assertions.assertEquals("@FirstNameLastName", user.getAlias());
    }

    @Test
    public void testLogin_invalidRequest() {
        try {
            userDAO.login("@badUSERname", "password");
        } catch (Exception e) {
            Assertions.assertEquals("BadRequest: Incorrect login", e.getMessage());
        }
    }

    @Test
    public void testGetUser_validRequest() {
        User user = userDAO.getUser("@FirstNameLastName");
        Assertions.assertEquals("@FirstNameLastName", user.getAlias());
        Assertions.assertEquals("FirstName", user.getFirstName());
        Assertions.assertEquals("LastName", user.getLastName());
        Assertions.assertEquals(MALE_IMAGE_URL, user.getImageUrl());
    }

    @Test
    public void testGetUser_invalidRequest() {
        try {
            userDAO.getUser("@badUSERname");
        } catch (Exception e) {
            Assertions.assertEquals("BadRequest: No User Found", e.getMessage());
        }
    }

    @Test
    public void testGetUsers_validRequest() {
        List<String> userAliases = new ArrayList<>();
        userAliases.add("@1");
        userAliases.add("@2");
        userAliases.add("@3");
        userAliases.add("@4");
        userAliases.add("@5");
        List<User> users = userDAO.getUsers(userAliases);
        Assertions.assertEquals("@1", users.get(0).getAlias());
        Assertions.assertEquals("@5", users.get(4).getAlias());
        Assertions.assertEquals("4", users.get(3).getFirstName());
        Assertions.assertEquals("3", users.get(2).getLastName());
    }

    @Test
    public void testRegister_validRequest() {
        User user = new User("Regi", "Boi", MALE_IMAGE_URL);
        byte[] decoded = Base64.getDecoder().decode(""
                .getBytes());
        User resultUser = userDAO.register("@RegiBoi",
                "password",
                "Regi",
                "Boi",
                decoded);
        Assertions.assertEquals(user.getLastName(), resultUser.getLastName());
        Assertions.assertEquals(user.getFirstName(), resultUser.getFirstName());
        Assertions.assertEquals(user.getAlias(), resultUser.getAlias());
    }

    @Test
    public void testGetFollowCount_validRequest() {
        User currentUser = new User("FirstName", "LastName", null);
        int numFollowees = userDAO.getFollowCount(currentUser.getAlias(), UserDAO.followeeCountAttr);
        int numFollowers = userDAO.getFollowCount(currentUser.getAlias(), UserDAO.followerCountAttr);
        Assertions.assertEquals(2, numFollowees);
        Assertions.assertEquals(2, numFollowers);
    }

    @Test
    public void testAddToFollowCount_validRequest() {
        String userAlias = "@AllenAnderson";
        int numFolloweesBefore = userDAO.getFollowCount(userAlias, UserDAO.followeeCountAttr);
        userDAO.addToFollowCount(userAlias, UserDAO.followeeCountAttr,1);
        int numFolloweesPlusOne = userDAO.getFollowCount(userAlias, UserDAO.followeeCountAttr);
        userDAO.addToFollowCount(userAlias, UserDAO.followeeCountAttr,-1);
        int numFolloweesAfter = userDAO.getFollowCount(userAlias, UserDAO.followeeCountAttr);

        Assertions.assertEquals(numFolloweesBefore, numFolloweesAfter);
        Assertions.assertEquals(numFolloweesBefore + 1, numFolloweesPlusOne);
    }

    @Test
    public void testAddUserBatchBatch_validRequest() {
        List<User> users = new ArrayList<>();
        users.add(new User("1", "1", "@1" , MALE_IMAGE_URL));
        users.add(new User("2", "2", "@2" , MALE_IMAGE_URL));
        users.add(new User("3", "3", "@3" , MALE_IMAGE_URL));
        users.add(new User("4", "4", "@4" , MALE_IMAGE_URL));
        users.add(new User("5", "5", "@5" , MALE_IMAGE_URL));

        userDAO.addUserBatch(users);
        // Since this did not throw an error the test was successful
    }
}
